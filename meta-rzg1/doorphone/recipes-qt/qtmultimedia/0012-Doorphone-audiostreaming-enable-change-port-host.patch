From d1907a8b8d118c22647a417871a99902bd5038c8 Mon Sep 17 00:00:00 2001
From: Chuan Anh Nguyen <chuan.nguyen.jy@rvc.renesas.com>
Date: Wed, 30 Nov 2016 10:57:50 +0700
Subject: [PATCH] Doorphone: audiostreaming enable change port & host 	 
 - Enable change port and host to support audio when switch	mode (1board 
 & 2boards)
 - Change pipeline to use G711 codec, reduce gstreamer elements

---
 .../qgstreameraudiostreamingsession.cpp            | 144 +++++++++------------
 .../qgstreameraudiostreamingsession.h              |   7 +-
 2 files changed, 67 insertions(+), 84 deletions(-)

diff --git a/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.cpp b/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.cpp
index fc8e30a..d6c1ee1 100755
--- a/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.cpp
+++ b/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.cpp
@@ -24,6 +24,22 @@ QGstreamerAudioStreamingSession::QGstreamerAudioStreamingSession(QObject *parent
     qDebug() << Q_FUNC_INFO;
 #endif
     m_pipeline = gst_pipeline_new ("AudioStreaming");
+    
+    m_udpsink = gst_element_factory_make("udpsink", "udp-sink");
+    m_alawenc = gst_element_factory_make("alawenc", "alaw-enc");
+	m_rtppcmapay = gst_element_factory_make("rtppcmapay", "rtppcma-pay");
+	m_queue = gst_element_factory_make("queue", "queue");
+	m_udpsrc = gst_element_factory_make("udpsrc", "Audio-input");
+	m_rtppcmadepay = gst_element_factory_make("rtppcmadepay", "rtppcma-depay");
+	m_alawdec = gst_element_factory_make("alawdec", "alaw-dec");
+	
+	m_capsfilter = gst_caps_new_simple ("application/x-rtp",
+								"media", G_TYPE_STRING, "audio",
+								NULL);
+	g_object_set (G_OBJECT (m_udpsrc), "caps", m_capsfilter, NULL);
+	gst_caps_unref (m_capsfilter);
+	g_object_set (G_OBJECT (m_udpsrc), "typefind", 1, NULL);
+	
     m_bus = gst_element_get_bus(m_pipeline);
     m_busHelper = new QGstreamerBusHelper(m_bus, this);
     m_busHelper->installMessageFilter(this);
@@ -41,35 +57,31 @@ QGstreamerAudioStreamingSession::~QGstreamerAudioStreamingSession()
         gst_object_unref(GST_OBJECT(m_pipeline));
     }
     //Check for element and caps when destruction
-    if(m_alsasrc)
+    if(G_IS_OBJECT (m_alsasrc))
         gst_object_unref(m_alsasrc);
-    if(m_aconvert)
-        gst_object_unref(m_aconvert);
-    if(m_aacenc)
-        gst_object_unref(m_aacenc);
-    if(m_rtpmp4apay)
-        gst_object_unref(m_rtpmp4apay);
-    if(m_udpsink)
+    if(G_IS_OBJECT (m_alawenc))
+        gst_object_unref(m_alawenc);
+    if(G_IS_OBJECT (m_rtppcmapay))
+        gst_object_unref(m_rtppcmapay);
+    if(G_IS_OBJECT (m_udpsink))
         gst_object_unref(m_udpsink);
-    if(m_udpsrc)
+    if(G_IS_OBJECT (m_udpsrc))
         gst_object_unref(m_udpsrc);
-    if(m_rtpjitterbuffer)
-        gst_object_unref(m_rtpjitterbuffer);
-    if(m_queue)
+    if(G_IS_OBJECT (m_queue))
         gst_object_unref(m_queue);
-    if(m_rtpmp4adepay)
-        gst_object_unref(m_rtpmp4adepay);
-    if(m_alsasink)
+    if(G_IS_OBJECT (m_rtppcmapay))
+        gst_object_unref(m_rtppcmapay);
+    if(G_IS_OBJECT (m_alsasink))
         gst_object_unref(m_alsasink);
-    if(m_aacdec)
-        gst_object_unref(m_aacdec);
+    if(G_IS_OBJECT (m_alawdec))
+        gst_object_unref(m_alawdec);
 
-    if(m_pulsesrc)
+    if(G_IS_OBJECT (m_pulsesrc))
         gst_object_unref(m_pulsesrc);
-    if(m_pulsesink)
+    if(G_IS_OBJECT (m_pulsesink))
         gst_object_unref(m_pulsesink);
 
-    if(m_capsfilter)
+    if(G_IS_OBJECT (m_capsfilter))
         gst_caps_unref(m_capsfilter);
 }
 
@@ -214,6 +226,8 @@ void QGstreamerAudioStreamingSession::setUsrcPort(int port)
     qDebug() << Q_FUNC_INFO << port;
 #endif
     m_usrcport = port;
+    
+    g_object_set (G_OBJECT (m_udpsrc), "port", m_usrcport, NULL);
 }
 
 void QGstreamerAudioStreamingSession::setUsinkHost(QString host)
@@ -230,6 +244,25 @@ void QGstreamerAudioStreamingSession::setUsinkPort(int port)
     qDebug() << Q_FUNC_INFO << port;
 #endif
     m_usinkport = port;
+    
+	GstStateChangeReturn state;
+	state = gst_element_get_state(m_pipeline, &currentState, &pending, GST_CLOCK_TIME_NONE);
+	if (currentState == GST_STATE_PLAYING) {
+		gst_element_set_state (m_pipeline, GST_STATE_PAUSED);
+		gst_element_set_state (m_udpsink, GST_STATE_PAUSED);
+		gst_element_set_state (m_udpsink, GST_STATE_NULL);
+		
+		g_object_set (G_OBJECT (m_udpsink), "host", m_usinkhost.toLatin1().constData(), NULL);
+		g_object_set (G_OBJECT (m_udpsink), "port", m_usinkport, NULL);
+		g_object_set (G_OBJECT (m_udpsink), "sync", m_usinksync, NULL);
+		
+		gst_element_set_state (m_udpsink, GST_STATE_PLAYING);
+		gst_element_set_state (m_pipeline, GST_STATE_PLAYING);
+	} else {
+		g_object_set (G_OBJECT (m_udpsink), "host", m_usinkhost.toLatin1().constData(), NULL);
+		g_object_set (G_OBJECT (m_udpsink), "port", m_usinkport, NULL);
+		g_object_set (G_OBJECT (m_udpsink), "sync", m_usinksync, NULL);
+	}
 }
 
 void QGstreamerAudioStreamingSession::setUsinkSync(bool sync)
@@ -251,32 +284,19 @@ void QGstreamerAudioStreamingSession::componentComplete()
 #endif
         if(m_audioplugin == "Alsa GST"){
             m_alsasrc = gst_element_factory_make("alsasrc", "Audio-output");
-            m_aconvert = gst_element_factory_make("audioconvert", "audioconvert");
-            m_aacenc = gst_element_factory_make("avenc_aac", "avenc_aac");
-            m_rtpmp4apay = gst_element_factory_make("rtpmp4apay", "rtpmp4apay");
-            m_udpsink = gst_element_factory_make("udpsink", "udpsink");
+            g_object_set (G_OBJECT (m_alsasrc), "do-timestamp", 1, NULL);
             
-            gst_bin_add_many (GST_BIN (m_pipeline), m_alsasrc, m_aconvert, m_aacenc, m_rtpmp4apay, m_udpsink, NULL);
-            gst_element_link_many(m_alsasrc, m_aconvert, m_aacenc, m_rtpmp4apay, m_udpsink, NULL);
-
-            g_object_set (G_OBJECT (m_alsasrc), "device", m_asrcdevice.toLatin1().constData(), NULL);
-            g_object_set (G_OBJECT (m_aacenc), "compliance", -2, NULL);
-            g_object_set (G_OBJECT (m_udpsink), "host", m_usinkhost.toLatin1().constData(), NULL);
-            g_object_set (G_OBJECT (m_udpsink), "port", m_usinkport, NULL);
-            g_object_set (G_OBJECT (m_udpsink), "sync", m_usinksync, NULL);
+            gst_bin_add_many (GST_BIN (m_pipeline), m_alsasrc, m_alawenc, m_rtppcmapay, m_udpsink, NULL);
+            gst_element_link_many(m_alsasrc, m_alawenc, m_rtppcmapay, m_udpsink, NULL);
         }else if(m_audioplugin == "Pulse GST"){
              qDebug() << "Pulse GST";
             m_pulsesrc = gst_element_factory_make("pulsesrc", "Audio-output");
-            m_aconvert = gst_element_factory_make("audioconvert", "audioconvert");
-            m_aacenc = gst_element_factory_make("avenc_aac", "avenc_aac");
-            m_rtpmp4apay = gst_element_factory_make("rtpmp4apay", "rtpmp4apay");
-            m_udpsink = gst_element_factory_make("udpsink", "udpsink");
+            g_object_set (G_OBJECT (m_pulsesrc), "do-timestamp", 1, NULL);
             
-            gst_bin_add_many (GST_BIN (m_pipeline), m_pulsesrc, m_aconvert, m_aacenc, m_rtpmp4apay, m_udpsink, NULL);
-            gst_element_link_many(m_pulsesrc, m_aconvert, m_aacenc, m_rtpmp4apay, m_udpsink, NULL);
+            gst_bin_add_many (GST_BIN (m_pipeline), m_pulsesrc, m_alawenc, m_rtppcmapay, m_udpsink, NULL);
+            gst_element_link_many(m_pulsesrc, m_alawenc, m_rtppcmapay, m_udpsink, NULL);
             
             g_object_set (G_OBJECT (m_pulsesrc), "provide-clock", false, NULL);
-            g_object_set (G_OBJECT (m_aacenc), "compliance", -2, NULL);
             GstStructure *props;
             props = gst_structure_from_string ("props,media.role=phone,filter.want=echo-cancel", NULL);
             g_object_set (G_OBJECT (m_pulsesrc), "stream-properties", props, NULL);
@@ -287,54 +307,16 @@ void QGstreamerAudioStreamingSession::componentComplete()
     qDebug() << "Receive Side";
 #endif
         if(m_audioplugin == "Alsa GST"){
-            m_udpsrc = gst_element_factory_make("udpsrc", "Audio-input");
-            m_rtpjitterbuffer = gst_element_factory_make("rtpjitterbuffer", "rtpjitterbuffer");
-            m_queue = gst_element_factory_make("queue", "queue");
-            m_rtpmp4adepay = gst_element_factory_make("rtpmp4adepay", "rtpmp4adepay");
-            m_aacdec = gst_element_factory_make("avdec_aac", "avdec_aac");
-            m_aconvert = gst_element_factory_make("audioconvert", "audioconvert");
-            m_convertcap = gst_element_factory_make("capsfilter", "aconvert-cap");
             m_alsasink = gst_element_factory_make("alsasink", "Audio-Display");
 
-            g_object_set (G_OBJECT (m_udpsrc), "port", m_usrcport, NULL);
-            m_capsfilter = gst_caps_new_simple ("application/x-rtp",
-                                                "config", G_TYPE_STRING, "40002420",
-                                                NULL);
-            g_object_set (G_OBJECT (m_udpsrc), "caps", m_capsfilter, NULL);
-            gst_caps_unref (m_capsfilter);
-
-            m_convertcapfilter = gst_caps_new_simple ("audio/x-raw", "format",G_TYPE_STRING, "S16LE",NULL);
-            g_object_set (G_OBJECT (m_convertcap), "caps", m_convertcapfilter, NULL);
-            gst_caps_unref (m_convertcapfilter);
-
-            gst_bin_add_many (GST_BIN (m_pipeline), m_udpsrc, m_rtpjitterbuffer, m_queue, m_rtpmp4adepay, m_aacdec, m_aconvert, m_convertcap, m_alsasink, NULL);
-            gst_element_link_many (m_udpsrc, m_rtpjitterbuffer, m_queue, m_rtpmp4adepay, m_aacdec, m_aconvert, m_convertcap, m_alsasink, NULL);
+            gst_bin_add_many (GST_BIN (m_pipeline), m_udpsrc, m_queue, m_rtppcmadepay, m_alawdec, m_alsasink, NULL);
+            gst_element_link_many (m_udpsrc, m_queue, m_rtppcmadepay, m_alawdec, m_alsasink, NULL);
 
         }else if(m_audioplugin == "Pulse GST"){
-            m_udpsrc = gst_element_factory_make("udpsrc", "Audio-input");
-            m_rtpjitterbuffer = gst_element_factory_make("rtpjitterbuffer", "rtpjitterbuffer");
-            m_queue = gst_element_factory_make("queue", "queue");
-            m_rtpmp4adepay = gst_element_factory_make("rtpmp4adepay", "rtpmp4adepay");
-            m_aacdec = gst_element_factory_make("avdec_aac", "avdec_aac");
-            m_aconvert = gst_element_factory_make("audioconvert", "audioconvert");
-            m_convertcap = gst_element_factory_make("capsfilter", "aconvert-cap");
             m_pulsesink = gst_element_factory_make("pulsesink", "Audio-Display");
 
-            g_object_set (G_OBJECT (m_udpsrc), "port", m_usrcport, NULL);
-            m_capsfilter = gst_caps_new_simple ("application/x-rtp",
-                                                "config", G_TYPE_STRING, "40002420",
-                                                NULL);
-            g_object_set (G_OBJECT (m_udpsrc), "caps", m_capsfilter, NULL);
-            gst_caps_unref (m_capsfilter);
-
-            m_convertcapfilter = gst_caps_new_simple ("audio/x-raw", "format",G_TYPE_STRING, "S16LE",NULL);
-            g_object_set (G_OBJECT (m_convertcap), "caps", m_convertcapfilter, NULL);
-            gst_caps_unref (m_convertcapfilter);
-
-            gst_bin_add_many (GST_BIN (m_pipeline), m_udpsrc, m_rtpjitterbuffer, m_queue, m_rtpmp4adepay, m_aacdec, m_aconvert, m_convertcap, m_pulsesink, NULL);
-            gst_element_link_many (m_udpsrc, m_rtpjitterbuffer, m_queue, m_rtpmp4adepay, m_aacdec, m_aconvert, m_convertcap, m_pulsesink, NULL);
-
-
+            gst_bin_add_many (GST_BIN (m_pipeline), m_udpsrc, m_queue, m_rtppcmadepay, m_alawdec, m_pulsesink, NULL);
+            gst_element_link_many (m_udpsrc, m_queue, m_rtppcmadepay, m_alawdec, m_pulsesink, NULL);
         }
     }
 }
diff --git a/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.h b/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.h
index 9cd0fe7..6556e01 100644
--- a/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.h
+++ b/src/plugins/gstreamer/audiostreaming/qgstreameraudiostreamingsession.h
@@ -62,10 +62,11 @@ private:
     bool m_usinksync;
     
     GstElement *m_pipeline;
-    GstElement *m_alsasrc, *m_aconvert, *m_aacenc, *m_rtpmp4apay, *m_udpsink;
-    GstElement *m_udpsrc, *m_rtpjitterbuffer, *m_queue, *m_rtpmp4adepay, *m_alsasink, *m_aacdec, *m_convertcap;
-    GstCaps *m_capsfilter, *m_convertcapfilter;
+    GstElement *m_alsasrc, *m_alawenc, *m_rtppcmapay, *m_udpsink;
+    GstElement *m_udpsrc, *m_queue, *m_rtppcmadepay, *m_alsasink, *m_alawdec;
+    GstCaps *m_capsfilter;
     GstElement *m_pulsesrc, *m_pulsesink;
+    GstState currentState, pending;
 };
 
 QT_END_NAMESPACE
-- 
1.9.1

