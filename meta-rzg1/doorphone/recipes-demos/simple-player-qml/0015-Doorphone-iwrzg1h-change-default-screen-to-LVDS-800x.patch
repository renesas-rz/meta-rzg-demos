From bf7e5b1808bd22f032a7b89c8e60b605d2ee35c4 Mon Sep 17 00:00:00 2001
From: nhannguyen <nhan.nguyen.yb@renesas.com>
Date: Mon, 26 Dec 2016 17:09:24 +0700
Subject: [PATCH] Doorphone: iwrzg1h change default screen to LVDS(800x480) 
 - Since both of screen HDMI & LVDS is detected in the same time eventhough HDMI
 is not conneted, we cannot detect when the HDMI is connected or not. -> The
 workarround is change the default screen to LVDS.

---
 main.cpp | 64 ++++++++++++++++++++++++++++++++--------------------------------
 1 file changed, 32 insertions(+), 32 deletions(-)

diff --git a/main.cpp b/main.cpp
index 01de818..eb381b2 100755
--- a/main.cpp
+++ b/main.cpp
@@ -63,21 +63,21 @@ QGuiApplication *p_app;
 int main(int argc, char *argv[])
 {
     QGuiApplication app(argc, argv);
-    p_app = &app;	/* For calling quit in signal handler */
+    p_app = &app;    /* For calling quit in signal handler */
 
     //Show information of screen (all monitors)
     // If 2 screen availabe, chose the larger as it is usually default
     QScreen *screen, *tmp_screen;
     if(QGuiApplication::screens().at(0) == NULL)
-		screen = QGuiApplication::screens().at(1);
-	  else if(QGuiApplication::screens().at(1) == NULL)
-		screen = QGuiApplication::screens().at(0);
-	  else {
-		screen = QGuiApplication::screens().at(0);
-		tmp_screen = QGuiApplication::screens().at(1);
-		if((screen->availableSize().width() * screen->availableSize().height()) < (tmp_screen->availableSize().width() * tmp_screen->availableSize().height()))
-			screen = QGuiApplication::screens().at(1);
-	  }
+        screen = QGuiApplication::screens().at(1);
+    else if(QGuiApplication::screens().at(1) == NULL)
+        screen = QGuiApplication::screens().at(0);
+    else {
+        screen = QGuiApplication::screens().at(0);
+        tmp_screen = QGuiApplication::screens().at(1);
+        if((screen->availableSize().width() * screen->availableSize().height()) > (tmp_screen->availableSize().width() * tmp_screen->availableSize().height()))
+            screen = QGuiApplication::screens().at(1);
+    }
     qDebug() << "Information for screen:" << screen->name();
     qDebug() << "  Available geometry:" << screen->availableGeometry().x() << screen->availableGeometry().y() << screen->availableGeometry().width() << "x" << screen->availableGeometry().height();
     qDebug() << "  Available size:" << screen->availableSize().width() << "x" << screen->availableSize().height();
@@ -94,34 +94,34 @@ int main(int argc, char *argv[])
     FileIO fileIO;
     viewer.rootContext()->setContextProperty("fileio", &fileIO);
 
-	// Get Wireless LAN IP and set to main.qml propery.
-	// The Wireless LAN must be set up correctly before running
-	{
-		int fd;
-		struct ifreq ifr;
-		char *Ip_string;
+    // Get Wireless LAN IP and set to main.qml propery.
+    // The Wireless LAN must be set up correctly before running
+    {
+        int fd;
+        struct ifreq ifr;
+        char *Ip_string;
 
-		fd = socket(AF_INET, SOCK_DGRAM, 0);
+        fd = socket(AF_INET, SOCK_DGRAM, 0);
 
-		/* I want to get an IPv4 IP address */
-		ifr.ifr_addr.sa_family = AF_INET;
+        /* I want to get an IPv4 IP address */
+        ifr.ifr_addr.sa_family = AF_INET;
 
-		/* I want IP address attached to "wlan0" */
-		strncpy(ifr.ifr_name, "wlan0", IFNAMSIZ-1);
+        /* I want IP address attached to "wlan0" */
+        strncpy(ifr.ifr_name, "wlan0", IFNAMSIZ-1);
 
-		ioctl(fd, SIOCGIFADDR, &ifr);
+        ioctl(fd, SIOCGIFADDR, &ifr);
 
-		close(fd);
+        close(fd);
 
-		Ip_string = inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr);
+        Ip_string = inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr);
 
-		viewer.rootContext()->setContextProperty("ip_string", Ip_string);
-	}
-	
-	ScriptLauncher  launcher;
-	viewer.rootContext()->setContextProperty("ScriptLauncher", &launcher);
+        viewer.rootContext()->setContextProperty("ip_string", Ip_string);
+    }
+    
+    ScriptLauncher  launcher;
+    viewer.rootContext()->setContextProperty("ScriptLauncher", &launcher);
 
-	
+    
     viewer.setFlags(Qt::FramelessWindowHint);
     viewer.setColor(QColor(Qt::transparent));
     viewer.setMinimumSize(QSize(640, 360));
@@ -134,6 +134,6 @@ int main(int argc, char *argv[])
 
 void exit_properly (int sig)
 {
-	signal (SIGINT, SIG_DFL);
-	p_app->exit();
+    signal (SIGINT, SIG_DFL);
+    p_app->exit();
 }
-- 
1.9.1

