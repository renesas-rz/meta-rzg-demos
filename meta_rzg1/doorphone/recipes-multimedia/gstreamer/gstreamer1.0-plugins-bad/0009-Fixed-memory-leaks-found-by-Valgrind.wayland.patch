From 0469d9396280e096683a941d8304cb396ef22df2 Mon Sep 17 00:00:00 2001
From: Andrey Vostrikov <andrey.vostrikov@cogentembedded.com>
Date: Fri, 30 Jan 2015 17:51:16 +0300
Subject: [PATCH] Fixed memory leaks found by Valgrind

---
 ext/wayland/gstwaylandsink.c | 44 ++++++++++++++++++++------------------------
 1 file changed, 20 insertions(+), 24 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 08f7142..e4b086d 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -297,6 +297,20 @@ destroy_display (struct display *display, gboolean ext_display)
   if (display->compositor)
     wl_compositor_destroy (display->compositor);
 
+  if (display->wl_queue)
+    wl_event_queue_destroy (display->wl_queue);
+
+  if (display->output)
+    wl_output_destroy (display->output);
+
+#ifdef HAVE_WAYLAND_KMS
+  if (display->wl_kms)
+    wl_kms_destroy (display->wl_kms);
+#endif
+
+  if (display->registry)
+    wl_registry_destroy (display->registry);
+
   if (display->display) {
     wl_display_flush (display->display);
     if (!ext_display)
@@ -317,7 +331,7 @@ destroy_window (struct window *window)
   if (window->surface)
     wl_surface_destroy (window->surface);
 
-  free (window);
+  g_free (window);
 }
 
 static void
@@ -459,6 +473,8 @@ registry_handle_global (void *data, struct wl_registry *registry,
     d->shm = wl_registry_bind (registry, id, &wl_shm_interface, 1);
     wl_shm_add_listener (d->shm, &shm_listenter, d);
   } else if (strcmp (interface, "wl_output") == 0) {
+    if (d->output)              /* TODO: process several outputs */
+      wl_output_destroy (d->output);
     d->output = wl_registry_bind (registry, id, &wl_output_interface, 1);       /* always last display */
 #ifdef HAVE_WAYLAND_KMS
   } else if (strcmp (interface, "wl_kms") == 0) {
@@ -539,6 +555,7 @@ create_display (GstWaylandSink * sink)
 
     if (!window->shell_surface) {
       GST_ERROR_OBJECT (sink, "Failed to create shell surface");
+      destroy_window (window);
       return FALSE;
     }
 
@@ -734,9 +751,6 @@ create_window (GstWaylandSink * sink, struct display *display, int width,
 {
   struct window *window;
 
-/*  if (sink->window)
-    return; */
-
   g_mutex_lock (&sink->wayland_lock);
 
   window = sink->window;
@@ -744,26 +758,6 @@ create_window (GstWaylandSink * sink, struct display *display, int width,
   window->width = width;
   window->height = height;
 
-/*
-  window = malloc (sizeof *window);
-  window->display = display;
-  window->redraw_pending = FALSE;
-  window->surface = wl_compositor_create_surface (display->compositor);
-
-  if (display->shell) {
-    window->shell_surface = wl_shell_get_shell_surface (display->shell,
-        window->surface);
-
-    g_return_if_fail (window->shell_surface);
-
-    wl_shell_surface_add_listener (window->shell_surface,
-        &shell_surface_listener, window);
-
-    wl_shell_surface_set_toplevel (window->shell_surface);
-  }
-
-  sink->window = window;
-*/
   window->init_complete = TRUE;
   g_mutex_unlock (&sink->wayland_lock);
 }
@@ -784,6 +778,8 @@ gst_wayland_sink_start (GstBaseSink * bsink)
     GST_ELEMENT_ERROR (bsink, RESOURCE, OPEN_READ_WRITE,
         ("Could not initialise Wayland output"),
         ("Could not create Wayland display"));
+    if (sink->window)
+      destroy_window (sink->window);
     return FALSE;
   }
 
-- 
2.1.2

