diff --git a/ext/waylandwrl/gstwaylandwrlsink.c b/ext/waylandwrl/gstwaylandwrlsink.c
index 8eda43a..6747a5e 100644
--- a/ext/waylandwrl/gstwaylandwrlsink.c
+++ b/ext/waylandwrl/gstwaylandwrlsink.c
@@ -55,7 +55,8 @@ enum
   PROP_0,
   PROP_WAYLAND_DISPLAY,
   PROP_WAYLAND_POSITION_X,    /* add property (position_x) */
-  PROP_WAYLAND_POSITION_Y     /* add property (position_y) */
+  PROP_WAYLAND_POSITION_Y,     /* add property (position_y) */
+  PROP_WAYLAND_SCALE           /* add property (scale)*/
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -241,6 +242,16 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
                         1080,
                         0,
                         G_PARAM_READWRITE));
+
+  /* install property (scale) */
+  g_object_class_install_property (G_OBJECT_CLASS(klass), PROP_WAYLAND_SCALE,
+      g_param_spec_int ("scale",
+                        "Scale",
+                        "Wayland Scale value from the application: (1)scale-down 1/2x, (2)no-scale, (3)scale-up 3/2x, (4)scale-up 2x ",
+                        1,
+                        4,
+                        2,
+                        G_PARAM_READWRITE));
 }
 
 static void
@@ -260,6 +271,7 @@ gst_wayland_sink_init (GstWaylandSink * sink)
 
   sink->position_x = -1;
   sink->position_y = -1;
+  sink->scale = 2;
 
   g_mutex_init (&sink->wayland_lock);
 }
@@ -282,6 +294,10 @@ gst_wayland_sink_get_property (GObject * object,
       /* set position_y property */
       g_value_set_int (value, sink->position_y);
       break;	  
+    case PROP_WAYLAND_SCALE:
+      /* set scale property */
+      g_value_set_int (value, sink->scale);
+      break;	  
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -307,6 +323,10 @@ gst_wayland_sink_set_property (GObject * object,
       /* get position_y property */
       sink->position_y = g_value_get_int (value);;
       break;	  
+    case PROP_WAYLAND_SCALE:
+      /* get scale property */
+      sink->scale = g_value_get_int (value);;
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -590,7 +610,7 @@ create_display (GstWaylandSink * sink)
         wl_shell_surface_set_toplevel (window->shell_surface);
       } else {
         /* set window position */
-        wl_shell_surface_set_transient (window->shell_surface, window->surface, sink->position_x, sink->position_y, 0);
+        wl_shell_surface_set_transient (window->shell_surface, window->surface, sink->position_x, sink->position_y, sink->scale);
 	    wl_shell_surface_set_toplevel (window->shell_surface);
       }
     }
diff --git a/ext/waylandwrl/gstwaylandwrlsink.h b/ext/waylandwrl/gstwaylandwrlsink.h
index c15c84f..fa51f16 100644
--- a/ext/waylandwrl/gstwaylandwrlsink.h
+++ b/ext/waylandwrl/gstwaylandwrlsink.h
@@ -117,6 +117,7 @@ struct _GstWaylandSink
 
   gint position_x;  /* property(position_x) */
   gint position_y;  /* property(position_y) */
+  gint scale;       /* property(scale) */
   uint32_t format;
 
   gboolean ext_display;
