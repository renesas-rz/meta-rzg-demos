diff --git a/gst/playback/gstdecodebin2.c b/gst/playback/gstdecodebin2.c
index ea8908d..2b1af13 100644
--- a/gst/playback/gstdecodebin2.c
+++ b/gst/playback/gstdecodebin2.c
@@ -183,6 +183,8 @@ struct _GstDecodeBin
   gboolean expose_allstreams;   /* Whether to expose unknow type streams or not */
 
   GList *filtered;              /* elements for which error messages are filtered */
+  gboolean decode_dmabuf;           /* use-dmabuf property set for omxh264dec */
+  gboolean decode_nocopy;           /* no-copy property set for omxh264dec */
 };
 
 struct _GstDecodeBinClass
@@ -267,6 +269,8 @@ enum
   PROP_POST_STREAM_TOPOLOGY,
   PROP_EXPOSE_ALL_STREAMS,
   PROP_CONNECTION_SPEED,
+  PROP_DECODE_DMABUF,  //specific property for omxh264dec
+  PROP_DECODE_NOCOPY,  //specific property for omxh264dec
   PROP_LAST
 };
 
@@ -964,7 +968,31 @@ gst_decode_bin_class_init (GstDecodeBinClass * klass)
           0, G_MAXUINT64 / 1000, DEFAULT_CONNECTION_SPEED,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  /**
+   * GstDecodeBin2::decode-dmabuf
+   *
+   * Set use-dmabuf for omxh264dec 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_klass, PROP_DECODE_DMABUF,
+      g_param_spec_boolean ("decode-dmabuf", "Set omxh264dec use dmabuffer ",
+        "Whether or not to set use-dmabuf for omxh264dec",
+        TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
 
+  /**
+   * GstDecodeBin2::decode-nocopy
+   *
+   * Set no-copy for omxh264dec 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_klass, PROP_DECODE_NOCOPY,
+      g_param_spec_boolean ("decode-nocopy", "Set omxh264dec use no-copy mode",
+        "Whether or not to set no-copy for omxh264dec",
+        FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
 
   klass->autoplug_continue =
       GST_DEBUG_FUNCPTR (gst_decode_bin_autoplug_continue);
@@ -1098,6 +1126,8 @@ gst_decode_bin_init (GstDecodeBin * decode_bin)
 
   decode_bin->expose_allstreams = DEFAULT_EXPOSE_ALL_STREAMS;
   decode_bin->connection_speed = DEFAULT_CONNECTION_SPEED;
+  decode_bin->decode_dmabuf = TRUE;
+  decode_bin->decode_nocopy = FALSE;
 }
 
 static void
@@ -1283,6 +1313,12 @@ gst_decode_bin_set_property (GObject * object, guint prop_id,
       dbin->connection_speed = g_value_get_uint64 (value) * 1000;
       GST_OBJECT_UNLOCK (dbin);
       break;
+    case PROP_DECODE_DMABUF:
+      dbin->decode_dmabuf = g_value_get_boolean (value);
+      break;
+    case PROP_DECODE_NOCOPY:
+      dbin->decode_nocopy = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -1335,6 +1371,12 @@ gst_decode_bin_get_property (GObject * object, guint prop_id,
       g_value_set_uint64 (value, dbin->connection_speed / 1000);
       GST_OBJECT_UNLOCK (dbin);
       break;
+    case PROP_DECODE_DMABUF:
+      g_value_set_boolean (value, dbin->decode_dmabuf);
+      break;
+    case PROP_DECODE_NOCOPY:
+      g_value_set_boolean (value, dbin->decode_nocopy);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2293,6 +2335,12 @@ connect_element (GstDecodeBin * dbin, GstDecodeElement * delem,
   GST_DEBUG_OBJECT (dbin, "Attempting to connect element %s [chain:%p] further",
       GST_ELEMENT_NAME (element), chain);
 
+  /*set dmabuf or nocopy for omxh264dec*/
+  if(!(strncmp(GST_ELEMENT_NAME (element), "omxh264dec", 10))) {
+    g_object_set(G_OBJECT(element), "no-copy", dbin->decode_nocopy, NULL);
+    g_object_set(G_OBJECT(element), "use-dmabuf", dbin->decode_dmabuf, NULL);
+  }
+
   /* 1. Loop over pad templates, grabbing existing pads along the way */
   for (pads = GST_ELEMENT_GET_CLASS (element)->padtemplates; pads;
       pads = g_list_next (pads)) {
diff --git a/gst/playback/gstplaybin2.c b/gst/playback/gstplaybin2.c
index fc02ca3..4f3406b 100644
--- a/gst/playback/gstplaybin2.c
+++ b/gst/playback/gstplaybin2.c
@@ -470,7 +470,8 @@ struct _GstPlayBin
   } duration[5];                /* cached durations */
 
   guint64 ring_buffer_max_size; /* 0 means disabled */
-
+  gboolean decode_dmabuf;           /* set use-dmabuf for omxh264dec */
+  gboolean decode_nocopy;           /* set no-copy for omxh264dec */
   GList *contexts;
 };
 
@@ -566,6 +567,8 @@ enum
   PROP_AV_OFFSET,
   PROP_RING_BUFFER_MAX_SIZE,
   PROP_FORCE_ASPECT_RATIO,
+  PROP_FORCE_DECODE_DMABUF,
+  PROP_FORCE_DECODE_NOCOPY,
   PROP_LAST
 };
 
@@ -979,6 +982,32 @@ gst_play_bin_class_init (GstPlayBinClass * klass)
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   /**
+   * GstPlayBin::decode-dmabuf
+   *
+   * Set use-dmabuf for omxh264dec 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_klass, PROP_FORCE_DECODE_DMABUF,
+      g_param_spec_boolean ("decode-dmabuf", "Set omxh264dec use dmabuffer ",
+        "Whether or not to set use-dmabuf for omxh264dec",
+        TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
+
+  /**
+   * GstPlayBin::decode-nocopy
+   *
+   * Set no-copy for omxh264dec 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_klass, PROP_FORCE_DECODE_NOCOPY,
+      g_param_spec_boolean ("decode-nocopy", "Set omxh264dec use no-copy mode",
+        "Whether or not to set no-copy for omxh264dec",
+        FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
+
+  /**
    * GstPlayBin::about-to-finish
    * @playbin: a #GstPlayBin
    *
@@ -1478,6 +1507,8 @@ gst_play_bin_init (GstPlayBin * playbin)
   playbin->ring_buffer_max_size = DEFAULT_RING_BUFFER_MAX_SIZE;
 
   playbin->force_aspect_ratio = TRUE;
+  playbin->decode_dmabuf = TRUE;
+  playbin->decode_nocopy = FALSE;
 }
 
 static void
@@ -2327,6 +2358,12 @@ gst_play_bin_set_property (GObject * object, guint prop_id,
       g_object_set (playbin->playsink, "force-aspect-ratio",
           g_value_get_boolean (value), NULL);
       break;
+    case PROP_FORCE_DECODE_DMABUF:
+      playbin->decode_dmabuf = g_value_get_boolean (value);
+      break;
+    case PROP_FORCE_DECODE_NOCOPY:
+      playbin->decode_nocopy = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2561,6 +2598,12 @@ gst_play_bin_get_property (GObject * object, guint prop_id, GValue * value,
       g_value_set_boolean (value, v);
       break;
     }
+    case PROP_FORCE_DECODE_DMABUF:
+      g_value_set_boolean (value, playbin->decode_dmabuf);
+      break;
+    case PROP_FORCE_DECODE_NOCOPY:
+      g_value_set_boolean (value, playbin->decode_nocopy);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -4984,7 +5027,9 @@ activate_group (GstPlayBin * playbin, GstSourceGroup * group, GstState target)
       /* configure buffering parameters */
       "buffer-duration", playbin->buffer_duration,
       "buffer-size", playbin->buffer_size,
-      "ring-buffer-max-size", playbin->ring_buffer_max_size, NULL);
+      "ring-buffer-max-size", playbin->ring_buffer_max_size, 
+      "decode-dmabuf", playbin->decode_dmabuf,
+      "decode-nocopy", playbin->decode_nocopy,NULL);
 
   /* connect pads and other things */
   group->pad_added_id = g_signal_connect (uridecodebin, "pad-added",
diff --git a/gst/playback/gsturidecodebin.c b/gst/playback/gsturidecodebin.c
index cb053f0..d01633b 100644
--- a/gst/playback/gsturidecodebin.c
+++ b/gst/playback/gsturidecodebin.c
@@ -116,6 +116,8 @@ struct _GstURIDecodeBin
   gboolean expose_allstreams;   /* Whether to expose unknow type streams or not */
 
   guint64 ring_buffer_max_size; /* 0 means disabled */
+  gboolean decode_dmabuf;           /* decode-dmabuf property set for decodebin */
+  gboolean decode_nocopy;           /* decode-nocopy property set for decodebin */
 };
 
 struct _GstURIDecodeBinClass
@@ -197,6 +199,8 @@ enum
   PROP_USE_BUFFERING,
   PROP_EXPOSE_ALL_STREAMS,
   PROP_RING_BUFFER_MAX_SIZE,
+  PROP_DECODEBIN_DMABUF,
+  PROP_DECODEBIN_NOCOPY,
   PROP_LAST
 };
 
@@ -491,6 +495,32 @@ gst_uri_decode_bin_class_init (GstURIDecodeBinClass * klass)
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   /**
+   * GstDecodeBin2::decode-dmabuf
+   *
+   * Set decode-dmabuf for decodebin 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_class, PROP_DECODEBIN_DMABUF,
+      g_param_spec_boolean ("decode-dmabuf", "Set decodebin decode-dmabuf property",
+        "Whether or not to set decode-dmabuf for decodebin",
+        TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
+
+  /**
+   * GstDecodeBin2::decode-nocopy
+   *
+   * Set decode-nocopy for decodebin 
+   *
+   * Since: 0.10.XX
+   */
+  g_object_class_install_property (gobject_class, PROP_DECODEBIN_NOCOPY,
+      g_param_spec_boolean ("decode-nocopy", "Set decodebin decode-nocopy property",
+        "Whether or not to set decode-nocopy for decodebin",
+        FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
+
+  /**
    * GstURIDecodeBin::unknown-type:
    * @bin: The uridecodebin.
    * @pad: the new pad containing caps that cannot be resolved to a 'final'.
@@ -732,6 +762,8 @@ gst_uri_decode_bin_init (GstURIDecodeBin * dec)
   dec->use_buffering = DEFAULT_USE_BUFFERING;
   dec->expose_allstreams = DEFAULT_EXPOSE_ALL_STREAMS;
   dec->ring_buffer_max_size = DEFAULT_RING_BUFFER_MAX_SIZE;
+  dec->decode_dmabuf = TRUE;
+  dec->decode_nocopy = FALSE;
 
   GST_OBJECT_FLAG_SET (dec, GST_ELEMENT_FLAG_SOURCE);
 }
@@ -822,6 +854,12 @@ gst_uri_decode_bin_set_property (GObject * object, guint prop_id,
     case PROP_RING_BUFFER_MAX_SIZE:
       dec->ring_buffer_max_size = g_value_get_uint64 (value);
       break;
+    case PROP_DECODEBIN_DMABUF:
+      dec->decode_dmabuf = g_value_get_boolean (value);
+      break;
+    case PROP_DECODEBIN_NOCOPY:
+      dec->decode_nocopy = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -882,6 +920,12 @@ gst_uri_decode_bin_get_property (GObject * object, guint prop_id,
     case PROP_RING_BUFFER_MAX_SIZE:
       g_value_set_uint64 (value, dec->ring_buffer_max_size);
       break;
+    case PROP_DECODEBIN_DMABUF:
+      g_value_set_boolean (value, dec->decode_dmabuf);
+      break;
+    case PROP_DECODEBIN_NOCOPY:
+      g_value_set_boolean (value, dec->decode_nocopy);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -1769,6 +1813,10 @@ make_decoder (GstURIDecodeBin * decoder)
     if (!decodebin)
       goto no_decodebin;
 
+    /*set property for decodebin*/
+    g_object_set(G_OBJECT(decodebin), "decode-dmabuf", decoder->decode_dmabuf, NULL);
+    g_object_set(G_OBJECT(decodebin), "decode-nocopy", decoder->decode_nocopy, NULL);
+
     /* sanity check */
     if (decodebin->numsinkpads == 0)
       goto no_typefind;
